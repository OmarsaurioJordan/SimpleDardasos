<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>persistent = true;
depth = -room_height;

for (var i = 0; i &lt; 12; i++)
{
    elcontrol[i] = -1;
    gamepad_set_axis_deadzone(i, 0.05);
}

puerto = 0;
do
{
    puerto++;
    servidor = network_create_socket_ext(network_socket_udp, puerto);
}
until servidor &gt;= 0;
alarm[0] = room_speed;

for (var i = 0; i &lt; 2; i++)
{
    for (var b = 0; b &lt; 11; b++)
    {
        boton_udp[i, b] = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>control.puerto = puerto;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0; i &lt; 12; i++)
{
    if elcontrol[i] == 0 //jugador
    {
        if gamepad_axis_value(i, gp_axislh) &gt;= 0.5 {
            keyboard_key_press(ord('D')); }
        else {
            keyboard_clear(ord('D')); }
        
        if gamepad_axis_value(i, gp_axislh) &lt;= -0.5 {
            keyboard_key_press(ord('A')); }
        else {
            keyboard_clear(ord('A')); }
        
        if gamepad_axis_value(i, gp_axislv) &gt;= 0.5 {
            keyboard_key_press(ord('S')); }
        else {
            keyboard_clear(ord('S')); }
        
        if gamepad_axis_value(i, gp_axislv) &lt;= -0.5 {
            keyboard_key_press(ord('W')); }
        else {
            keyboard_clear(ord('W')); }
        
        if gamepad_button_check_released(i, gp_face1) {
            keyboard_key_release(ord('M')); }
        else if gamepad_button_check(i, gp_face1) {
            keyboard_key_press(ord('M')); }
        
        if gamepad_button_check_released(i, gp_face3) {
            keyboard_key_release(ord('E')); }
        else if gamepad_button_check(i, gp_face3) {
            keyboard_key_press(ord('E')); }
        
        if gamepad_button_check_released(i, gp_face4) {
            keyboard_key_release(ord('Q')); }
        else if gamepad_button_check(i, gp_face4) {
            keyboard_key_press(ord('Q')); }
        
        if gamepad_button_check_released(i, gp_shoulderl) {
            keyboard_key_release(ord('F')); }
        else if gamepad_button_check(i, gp_shoulderl) {
            keyboard_key_press(ord('F')); }
        
        if gamepad_button_check_released(i, gp_shoulderlb) {
            keyboard_key_release(ord('R')); }
        else if gamepad_button_check(i, gp_shoulderlb) {
            keyboard_key_press(ord('R')); }
        
        if gamepad_button_check_released(i, gp_shoulderr) {
            keyboard_key_release(vk_space); }
        else if gamepad_button_check(i, gp_shoulderr) {
            keyboard_key_press(vk_space); }
        
        if gamepad_button_check_released(i, gp_shoulderrb) {
            keyboard_key_release(ord('T')); }
        else if gamepad_button_check(i, gp_shoulderrb) {
            keyboard_key_press(ord('T')); }
    }
    else if elcontrol[i] == 1 //apoyo
    {
        if gamepad_axis_value(i, gp_axislh) &gt;= 0.5 {
            keyboard_key_press(vk_right); }
        else {
            keyboard_clear(vk_right); }
        
        if gamepad_axis_value(i, gp_axislh) &lt;= -0.5 {
            keyboard_key_press(vk_left); }
        else {
            keyboard_clear(vk_left); }
        
        if gamepad_axis_value(i, gp_axislv) &gt;= 0.5 {
            keyboard_key_press(vk_down); }
        else {
            keyboard_clear(vk_down); }
        
        if gamepad_axis_value(i, gp_axislv) &lt;= -0.5 {
            keyboard_key_press(vk_up); }
        else {
            keyboard_clear(vk_up); }
        
        if gamepad_button_check_released(i, gp_face1) {
            keyboard_key_release(vk_numpad1); }
        else if gamepad_button_check(i, gp_face1) {
            keyboard_key_press(vk_numpad1); }
        
        if gamepad_button_check_released(i, gp_face3) {
            keyboard_key_release(vk_shift); }
        else if gamepad_button_check(i, gp_face3) {
            keyboard_key_press(vk_shift); }
        
        if gamepad_button_check_released(i, gp_face4) {
            keyboard_key_release(vk_numpad7); }
        else if gamepad_button_check(i, gp_face4) {
            keyboard_key_press(vk_numpad7); }
        
        if gamepad_button_check_released(i, gp_shoulderl) {
            keyboard_key_release(vk_delete); }
        else if gamepad_button_check(i, gp_shoulderl) {
            keyboard_key_press(vk_delete); }
        
        if gamepad_button_check_released(i, gp_shoulderr) {
            keyboard_key_release(vk_numpad0); }
        else if gamepad_button_check(i, gp_shoulderr) {
            keyboard_key_press(vk_numpad0); }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_map_find_value(async_load, "event_type") == "gamepad discovered"
{
    var cc = -1;
    for (var n = 0; n &lt; 2; n++)
    {
        for (var i = 0; i &lt; 12; i++)
        {
            if elcontrol[i] == n { break; }
            else if i == 11 { cc = n; }
        }
        if cc != -1 { break; }
    }
    elcontrol[ds_map_find_value(async_load, "pad_index")] = cc;
    if cc == 0
    {
        manejo=1;
    }
    gamepad_set_button_threshold(ds_map_find_value(async_load, "pad_index"), 0.5);
}
else
{
    if elcontrol[ds_map_find_value(async_load, "pad_index")] == 0
    {
        manejo=0;
    }
    elcontrol[ds_map_find_value(async_load, "pad_index")] = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_map_find_value(async_load, "size") &gt;= 27
{
    var paquete = ds_map_find_value(async_load, "buffer");
    buffer_seek(paquete, buffer_seek_start, 0);
    var quien = clamp(buffer_read(paquete, buffer_u8), 0, 1);
    
    var boton;
    if quien == 0 //jugador
    {
        boton = buffer_read(paquete, buffer_bool);
        if boton and !boton_udp[quien, 0] {
            boton_udp[quien, 0] = true;
            keyboard_key_press(ord('D')); }
        else if !boton and boton_udp[quien, 0] {
            boton_udp[quien, 0] = false;
            keyboard_key_release(ord('D')); }
        
        boton = buffer_read(paquete, buffer_bool);
        if boton and !boton_udp[quien, 1] {
            boton_udp[quien, 1] = true;
            keyboard_key_press(ord('A')); }
        else if !boton and boton_udp[quien, 1] {
            boton_udp[quien, 1] = false;
            keyboard_key_release(ord('A')); }
        
        boton = buffer_read(paquete, buffer_bool);
        if boton and !boton_udp[quien, 2] {
            boton_udp[quien, 2] = true;
            keyboard_key_press(ord('S')); }
        else if !boton and boton_udp[quien, 2] {
            boton_udp[quien, 2] = false;
            keyboard_key_release(ord('S')); }
        
        boton = buffer_read(paquete, buffer_bool);
        if boton and !boton_udp[quien, 3] {
            boton_udp[quien, 3] = true;
            keyboard_key_press(ord('W')); }
        else if !boton and boton_udp[quien, 3] {
            boton_udp[quien, 3] = false;
            keyboard_key_release(ord('W')); }
        
        repeat 9 {
            boton = buffer_read(paquete, buffer_bool); }
        
        // X
        boton = buffer_read(paquete, buffer_bool);
        if boton and !boton_udp[quien, 5] {
            boton_udp[quien, 5] = true;
            keyboard_key_press(ord('E')); }
        else if !boton and boton_udp[quien, 5] {
            boton_udp[quien, 5] = false;
            keyboard_key_release(ord('E')); }
        
        // A
        boton = buffer_read(paquete, buffer_bool);
        if boton and !boton_udp[quien, 4] {
            boton_udp[quien, 4] = true;
            keyboard_key_press(ord('M')); }
        else if !boton and boton_udp[quien, 4] {
            boton_udp[quien, 4] = false;
            keyboard_key_release(ord('M')); }
        
        // Y
        boton = buffer_read(paquete, buffer_bool);
        if boton and !boton_udp[quien, 6] {
            boton_udp[quien, 6] = true;
            keyboard_key_press(ord('Q')); }
        else if !boton and boton_udp[quien, 6] {
            boton_udp[quien, 6] = false;
            keyboard_key_release(ord('Q')); }
        
        repeat 6 {
            boton = buffer_read(paquete, buffer_bool); }
        
        // izq boton
        boton = buffer_read(paquete, buffer_bool);
        if boton and !boton_udp[quien, 7] {
            boton_udp[quien, 7] = true;
            keyboard_key_press(ord('F')); }
        else if !boton and boton_udp[quien, 7] {
            boton_udp[quien, 7] = false;
            keyboard_key_release(ord('F')); }
        
        // izq gatillo
        boton = buffer_read(paquete, buffer_bool);
        if boton and !boton_udp[quien, 8] {
            boton_udp[quien, 8] = true;
            keyboard_key_press(ord('R')); }
        else if !boton and boton_udp[quien, 8] {
            boton_udp[quien, 8] = false;
            keyboard_key_release(ord('R')); }
        
        // der boton
        boton = buffer_read(paquete, buffer_bool);
        if boton and !boton_udp[quien, 9] {
            boton_udp[quien, 9] = true;
            keyboard_key_press(vk_space); }
        else if !boton and boton_udp[quien, 9] {
            boton_udp[quien, 9] = false;
            keyboard_key_release(vk_space); }
        
        // der gatillo
        boton = buffer_read(paquete, buffer_bool);
        if boton and !boton_udp[quien, 10] {
            boton_udp[quien, 10] = true;
            keyboard_key_press(ord('T')); }
        else if !boton and boton_udp[quien, 10] {
            boton_udp[quien, 10] = false;
            keyboard_key_release(ord('T')); }
    }
    else //apoyo
    {
        boton = buffer_read(paquete, buffer_bool);
        if boton and !boton_udp[quien, 0] {
            boton_udp[quien, 0] = true;
            keyboard_key_press(vk_right); }
        else if !boton and boton_udp[quien, 0] {
            boton_udp[quien, 0] = false;
            keyboard_key_release(vk_right); }
        
        boton = buffer_read(paquete, buffer_bool);
        if boton and !boton_udp[quien, 1] {
            boton_udp[quien, 1] = true;
            keyboard_key_press(vk_left); }
        else if !boton and boton_udp[quien, 1] {
            boton_udp[quien, 1] = false;
            keyboard_key_release(vk_left); }
        
        boton = buffer_read(paquete, buffer_bool);
        if boton and !boton_udp[quien, 2] {
            boton_udp[quien, 2] = true;
            keyboard_key_press(vk_down); }
        else if !boton and boton_udp[quien, 2] {
            boton_udp[quien, 2] = false;
            keyboard_key_release(vk_down); }
        
        boton = buffer_read(paquete, buffer_bool);
        if boton and !boton_udp[quien, 3] {
            boton_udp[quien, 3] = true;
            keyboard_key_press(vk_up); }
        else if !boton and boton_udp[quien, 3] {
            boton_udp[quien, 3] = false;
            keyboard_key_release(vk_up); }
        
        repeat 9 {
            boton = buffer_read(paquete, buffer_bool); }
        
        // X
        boton = buffer_read(paquete, buffer_bool);
        if boton and !boton_udp[quien, 5] {
            boton_udp[quien, 5] = true;
            keyboard_key_press(vk_shift); }
        else if !boton and boton_udp[quien, 5] {
            boton_udp[quien, 5] = false;
            keyboard_key_release(vk_shift); }
        
        // A
        boton = buffer_read(paquete, buffer_bool);
        if boton and !boton_udp[quien, 4] {
            boton_udp[quien, 4] = true;
            keyboard_key_press(vk_numpad1); }
        else if !boton and boton_udp[quien, 4] {
            boton_udp[quien, 4] = false;
            keyboard_key_release(vk_numpad1); }
        
        // Y
        boton = buffer_read(paquete, buffer_bool);
        if boton and !boton_udp[quien, 6] {
            boton_udp[quien, 6] = true;
            keyboard_key_press(vk_numpad7); }
        else if !boton and boton_udp[quien, 6] {
            boton_udp[quien, 6] = false;
            keyboard_key_release(vk_numpad7); }
        
        repeat 6 {
            boton = buffer_read(paquete, buffer_bool); }
        
        // izq boton
        boton = buffer_read(paquete, buffer_bool);
        if boton and !boton_udp[quien, 7] {
            boton_udp[quien, 7] = true;
            keyboard_key_press(vk_delete); }
        else if !boton and boton_udp[quien, 7] {
            boton_udp[quien, 7] = false;
            keyboard_key_release(vk_delete); }
        
        // izq gatillo
        boton = buffer_read(paquete, buffer_bool);
        if boton and !boton_udp[quien, 8] {
            boton_udp[quien, 8] = true; }
        else if !boton and boton_udp[quien, 8] {
            boton_udp[quien, 8] = false; }
        
        // der boton
        boton = buffer_read(paquete, buffer_bool);
        if boton and !boton_udp[quien, 9] {
            boton_udp[quien, 9] = true;
            keyboard_key_press(vk_numpad0); }
        else if !boton and boton_udp[quien, 9] {
            boton_udp[quien, 9] = false;
            keyboard_key_release(vk_numpad0); }
        
        // der gatillo
        boton = buffer_read(paquete, buffer_bool);
        if boton and !boton_udp[quien, 10] {
            boton_udp[quien, 10] = true; }
        else if !boton and boton_udp[quien, 10] {
            boton_udp[quien, 10] = false; }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(servidor);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
