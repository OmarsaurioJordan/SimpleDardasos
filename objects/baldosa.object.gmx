<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>base1</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth=13000;//12000 si tipo mayor que 0
move_snap(48,48);
tipo=0;//0:tierra, 1:2:3: baldosas
destroy=0;
alarm[2]=4;
alarm[3]=9;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(collision_point(x,y,baldosa,1,1)){
    instance_destroy();}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(x&lt;32 or x&gt;room_width-32 or y&gt;room_height-32 or y&lt;128){
    instance_destroy();}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var aux;
aux=collision_point(x+48,y,baldosa,1,1);
if(aux&gt;0){
    if(aux.tipo=tipo and aux.destroy=0){
        aux.destroy=1;
        aux.alarm[1]=1;}}
aux=collision_point(x+48,y+48,baldosa,1,1);
if(aux&gt;0 and !(collision_point(x+48,y,bloque,1,1)and collision_point(x,y+48,bloque,1,1))){
    if(aux.tipo=tipo and aux.destroy=0){
        aux.destroy=1;
        aux.alarm[1]=1;}}
aux=collision_point(x,y+48,baldosa,1,1);
if(aux&gt;0){
    if(aux.tipo=tipo and aux.destroy=0){
        aux.destroy=1;
        aux.alarm[1]=1;}}
aux=collision_point(x-48,y+48,baldosa,1,1);
if(aux&gt;0 and !(collision_point(x-48,y,bloque,1,1)and collision_point(x,y+48,bloque,1,1))){
    if(aux.tipo=tipo and aux.destroy=0){
        aux.destroy=1;
        aux.alarm[1]=1;}}
aux=collision_point(x-48,y,baldosa,1,1);
if(aux&gt;0){
    if(aux.tipo=tipo and aux.destroy=0){
        aux.destroy=1;
        aux.alarm[1]=1;}}
aux=collision_point(x-48,y-48,baldosa,1,1);
if(aux&gt;0 and !(collision_point(x-48,y,bloque,1,1)and collision_point(x,y-48,bloque,1,1))){
    if(aux.tipo=tipo and aux.destroy=0){
        aux.destroy=1;
        aux.alarm[1]=1;}}
aux=collision_point(x,y-48,baldosa,1,1);
if(aux&gt;0){
    if(aux.tipo=tipo and aux.destroy=0){
        aux.destroy=1;
        aux.alarm[1]=1;}}
aux=collision_point(x+48,y-48,baldosa,1,1);
if(aux&gt;0 and !(collision_point(x+48,y,bloque,1,1)and collision_point(x,y-48,bloque,1,1))){
    if(aux.tipo=tipo and aux.destroy=0){
        aux.destroy=1;
        aux.alarm[1]=1;}}
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var aux;
if(!collision_point(x+48,y,baldosa,1,1)){
    if(tipo!=0 or !collision_point(x+48,y,bloque,1,1)or collision_point(x+48,y,natural,1,1)){
    aux=instance_create(x+48,y,baldosa);
    aux.depth=depth;
    aux.tipo=tipo;
    if(!collision_point(x+48,y,bloque,1,1) and frenobaldosa(x+48,y)){
        aux.alarm[0]=1;}}}
if(!collision_point(x+48,y+48,baldosa,1,1)){
    if(tipo!=0 or !collision_point(x+48,y+48,bloque,1,1)or collision_point(x+48,y+48,natural,1,1)){
    if(!(collision_point(x+48,y,bloque,1,1)and collision_point(x,y+48,bloque,1,1))or collision_point(x+48,y+48,bloque,1,1)){
        aux=instance_create(x+48,y+48,baldosa);
        aux.depth=depth;
        aux.tipo=tipo;
        if(!collision_point(x+48,y+48,bloque,1,1) and frenobaldosa(x+48,y+48)){
            aux.alarm[0]=1;}}}}
if(!collision_point(x,y+48,baldosa,1,1)){
    if(tipo!=0 or !collision_point(x,y+48,bloque,1,1)or collision_point(x,y+48,natural,1,1)){
    aux=instance_create(x,y+48,baldosa);
    aux.depth=depth;
    aux.tipo=tipo;
    if(!collision_point(x,y+48,bloque,1,1) and frenobaldosa(x,y+48)){
        aux.alarm[0]=1;}}}
if(!collision_point(x-48,y+48,baldosa,1,1)){
    if(tipo!=0 or !collision_point(x-48,y+48,bloque,1,1)or collision_point(x-48,y+48,natural,1,1)){
    if(!(collision_point(x-48,y,bloque,1,1)and collision_point(x,y+48,bloque,1,1))or collision_point(x-48,y+48,bloque,1,1)){
        aux=instance_create(x-48,y+48,baldosa);
        aux.depth=depth;
        aux.tipo=tipo;
        if(!collision_point(x-48,y+48,bloque,1,1) and frenobaldosa(x-48,y+48)){
            aux.alarm[0]=1;}}}}
if(!collision_point(x-48,y,baldosa,1,1)){
    if(tipo!=0 or !collision_point(x-48,y,bloque,1,1)or collision_point(x-48,y,natural,1,1)){
    aux=instance_create(x-48,y,baldosa);
    aux.depth=depth;
    aux.tipo=tipo;
    if(!collision_point(x-48,y,bloque,1,1) and frenobaldosa(x-48,y)){
        aux.alarm[0]=1;}}}
if(!collision_point(x-48,y-48,baldosa,1,1)){
    if(tipo!=0 or !collision_point(x-48,y-48,bloque,1,1)or collision_point(x-48,y-48,natural,1,1)){
    if(!(collision_point(x-48,y,bloque,1,1)and collision_point(x,y-48,bloque,1,1))or collision_point(x-48,y-48,bloque,1,1)){
        aux=instance_create(x-48,y-48,baldosa);
        aux.depth=depth;
        aux.tipo=tipo;
        if(!collision_point(x-48,y-48,bloque,1,1) and frenobaldosa(x-48,y-48)){
            aux.alarm[0]=1;}}}}
if(!collision_point(x,y-48,baldosa,1,1)){
    if(tipo!=0 or !collision_point(x,y-48,bloque,1,1)or collision_point(x,y-48,natural,1,1)){
    aux=instance_create(x,y-48,baldosa);
    aux.depth=depth;
    aux.tipo=tipo;
    if(!collision_point(x,y-48,bloque,1,1) and frenobaldosa(x,y-48)){
        aux.alarm[0]=1;}}}
if(!collision_point(x+48,y-48,baldosa,1,1)){
    if(tipo!=0 or !collision_point(x+48,y-48,bloque,1,1)or collision_point(x+48,y-48,natural,1,1)){
    if(!(collision_point(x+48,y,bloque,1,1)and collision_point(x,y-48,bloque,1,1))or collision_point(x+48,y-48,bloque,1,1)){
        aux=instance_create(x+48,y-48,baldosa);
        aux.depth=depth;
        aux.tipo=tipo;
        if(!collision_point(x+48,y-48,bloque,1,1) and frenobaldosa(x+48,y-48)){
            aux.alarm[0]=1;}}}}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(two_d=1 or tre_d=0){
    draw_sprite(d_baldosas,4+tipo,x,y);}
else{
    draw_sprite(d_baldosas,tipo,x,y);}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
